{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Loading/Loading.jsx\";\nimport { View } from 'native-base';\nimport React, { useEffect } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect } from 'react-redux';\nimport styles from \"./LoadingStyles\";\nimport { sendUser } from \"../../redux/actions/userActions\";\n\nfunction Loading(_ref) {\n  var dispatch = _ref.dispatch,\n      navigation = _ref.navigation;\n\n  function checkIfLoggedIn() {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        dispatch(sendUser({\n          id: user.providerData[0].uid,\n          name: user.providerData[0].displayName,\n          email: user.providerData[0].email,\n          password: null,\n          favs: [],\n          admin: false,\n          restaurant: null,\n          saved: [],\n          sent: []\n        }));\n        setTimeout(function () {\n          navigation.navigate('categories');\n        }, 3000);\n      } else {\n        setTimeout(function () {\n          navigation.navigate('login');\n        }, 3000);\n      }\n    });\n  }\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    checkIfLoggedIn();\n  }, [isFocused]);\n  return React.createElement(View, {\n    testID: \"Loading\",\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"dark-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    style: {\n      width: 200,\n      height: 200\n    },\n    source: {\n      uri: 'https://trello-attachments.s3.amazonaws.com/5fc4dc9893cb2246bcf25278/5fc4dc9993cb2246bcf252be/7b072f968b3b6d4f4f2c6ffd249e3272/big-vertical-logo.png'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }));\n}\n\nLoading.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired\n  }).isRequired,\n  mongoUser: PropTypes.shape({})\n};\nLoading.defaultProps = {\n  mongoUser: {}\n};\n\nfunction mapStateToProps(_ref2) {\n  var authReducer = _ref2.authReducer;\n  return {\n    mongoUser: authReducer.user\n  };\n}\n\nexport default connect(mapStateToProps)(Loading);","map":{"version":3,"sources":["/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Loading/Loading.jsx"],"names":["View","React","useEffect","PropTypes","firebase","useIsFocused","connect","styles","sendUser","Loading","dispatch","navigation","checkIfLoggedIn","auth","onAuthStateChanged","user","id","providerData","uid","name","displayName","email","password","favs","admin","restaurant","saved","sent","setTimeout","navigate","isFocused","container","width","height","uri","propTypes","func","isRequired","shape","mongoUser","defaultProps","mapStateToProps","authReducer"],"mappings":"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","sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport { View } from 'native-base';\nimport React, { useEffect } from 'react';\nimport { Image, StatusBar } from 'react-native';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport { useIsFocused } from '@react-navigation/native';\nimport { connect } from 'react-redux';\nimport styles from './LoadingStyles';\nimport { sendUser } from '../../redux/actions/userActions';\n\nfunction Loading({ dispatch, navigation }) {\n  function checkIfLoggedIn() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(sendUser({\n          id: user.providerData[0].uid,\n          name: user.providerData[0].displayName,\n          email: user.providerData[0].email,\n          password: null,\n          favs: [],\n          admin: false,\n          restaurant: null,\n          saved: [],\n          sent: [],\n        }));\n        setTimeout(() => { navigation.navigate('categories'); }, 3000);\n      } else {\n        setTimeout(() => { navigation.navigate('login'); }, 3000);\n      }\n    });\n  }\n\n  const isFocused = useIsFocused();\n  useEffect(() => {\n    checkIfLoggedIn();\n  }, [isFocused]);\n\n  return (\n    <View testID=\"Loading\" style={styles.container}>\n      <StatusBar barStyle=\"dark-content\" />\n      <Image\n        style={{ width: 200, height: 200 }}\n        source={{ uri: 'https://trello-attachments.s3.amazonaws.com/5fc4dc9893cb2246bcf25278/5fc4dc9993cb2246bcf252be/7b072f968b3b6d4f4f2c6ffd249e3272/big-vertical-logo.png' }}\n      />\n    </View>\n  );\n}\n\nLoading.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n  }).isRequired,\n  mongoUser: PropTypes.shape({}),\n};\n\nLoading.defaultProps = {\n  mongoUser: {},\n};\n\nfunction mapStateToProps({ authReducer }) {\n  return {\n    mongoUser: authReducer.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Loading);\n"]},"metadata":{},"sourceType":"module"}