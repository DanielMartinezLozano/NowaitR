{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport actionTypes from \"../actions/action-types\";\nvar initialState = {\n  cartList: [],\n  cartSize: 0\n};\nexport default function orderReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.LOAD_ORDER_PRODUCTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderList: _toConsumableArray(action.orderList),\n        cartSize: action.orderList.reduce(function (acc, cur) {\n          return acc + cur.quantity;\n        }, 0)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/redux/reducers/orderReducer.js"],"names":["actionTypes","initialState","cartList","cartSize","orderReducer","state","action","type","LOAD_ORDER_PRODUCTS","orderList","reduce","acc","cur","quantity"],"mappings":";;;;;;;AAAA,OAAOA,WAAP;AAEA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAArB;AAEA,eAAe,SAASC,YAAT,GAAoD;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,WAAW,CAACQ,mBAAjB;AACE,6CACKH,KADL;AAEEI,QAAAA,SAAS,qBAAMH,MAAM,CAACG,SAAb,CAFX;AAGEN,QAAAA,QAAQ,EAAEG,MAAM,CAACG,SAAP,CAAiBC,MAAjB,CAAwB,UAACC,GAAD,EAAMC,GAAN;AAAA,iBAAcD,GAAG,GAAGC,GAAG,CAACC,QAAxB;AAAA,SAAxB,EAA0D,CAA1D;AAHZ;;AAMF;AACE,aAAOR,KAAP;AATJ;AAWD","sourcesContent":["import actionTypes from '../actions/action-types';\n\nconst initialState = { cartList: [], cartSize: 0 };\n\nexport default function orderReducer(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.LOAD_ORDER_PRODUCTS:\n      return {\n        ...state,\n        orderList: [...action.orderList],\n        cartSize: action.orderList.reduce((acc, cur) => acc + cur.quantity, 0),\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}