{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Login/Login.jsx\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport styles from \"./LoginStyles\";\nimport { addUser, loadUser } from \"../../redux/actions/userActions\";\nexport default function Login() {\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n\n      for (var i = 0; i < providerData.length; i += 1) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function onSignIn(googleUser) {\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n        firebase.auth().signInWithCredential(credential).then(function (result) {\n          if (result.additionalUserInfo.isNewUser) {\n            addUser(result.additionalUserInfo.profile);\n          }\n\n          var sub = result.additionalUserInfo.profile.sub;\n          loadUser(sub);\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  function signInWithGoogleAsync() {\n    var result;\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Google.logInAsync({\n              iosClientId: '911481650727-c5qtavkbcnuqge0o8lbnnb7mtndtrbh9.apps.googleusercontent.com',\n              scopes: ['profile', 'email']\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (!(result.type === 'success')) {\n              _context.next = 7;\n              break;\n            }\n\n            onSignIn(result);\n            return _context.abrupt(\"return\", result.accessToken);\n\n          case 7:\n            return _context.abrupt(\"return\", {\n              cancelled: true\n            });\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return signInWithGoogleAsync();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Inicia sesi\\xF3n con Google\")));\n}","map":{"version":3,"sources":["/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Login/Login.jsx"],"names":["React","Google","firebase","styles","addUser","loadUser","Login","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","profile","sub","catch","error","errorCode","code","errorMessage","message","email","console","log","signInWithGoogleAsync","logInAsync","iosClientId","scopes","type","cancelled","container"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable no-shadow */\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport styles from './LoginStyles';\nimport { addUser, loadUser } from '../../redux/actions/userActions';\n\nexport default function Login() {\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      const { providerData } = firebaseUser;\n      for (let i = 0; i < providerData.length; i += 1) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID\n                && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function onSignIn(googleUser) {\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    const unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\n      unsubscribe();\n      // Check if we are already signed-in Firebase with the correct user.\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.idToken,\n          googleUser.accessToken,\n        );\n\n        // Sign in with credential from the Google user.\n        firebase.auth().signInWithCredential(credential).then(\n          (result) => {\n            if (result.additionalUserInfo.isNewUser) {\n              addUser(result.additionalUserInfo.profile);\n            }\n            const { sub } = result.additionalUserInfo.profile;\n            loadUser(sub);\n          },\n        ).catch((error) => {\n          // Handle Errors here.\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          // The email of the user's account used.\n          const { email } = error;\n          // The firebase.auth.AuthCredential type that was used.\n          const { credential } = error;\n          // ...\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  async function signInWithGoogleAsync() {\n    try {\n      const result = await Google.logInAsync({\n        // androidClientId: YOUR_CLIENT_ID_HERE,\n        iosClientId: '911481650727-c5qtavkbcnuqge0o8lbnnb7mtndtrbh9.apps.googleusercontent.com',\n        scopes: ['profile', 'email'],\n      });\n\n      if (result.type === 'success') {\n        onSignIn(result);\n        return result.accessToken;\n      }\n      return { cancelled: true };\n    } catch (e) {\n      return { error: true };\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        onPress={() => signInWithGoogleAsync()}\n      >\n        <Text>Inicia sesi√≥n con Google</Text>\n      </Button>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}