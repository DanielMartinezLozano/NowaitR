{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Login/Login.jsx\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIsFocused } from '@react-navigation/native';\nimport styles from \"./LoginStyles\";\nimport { addUser, loadUser } from \"../../redux/actions/userActions\";\n\nfunction Login(_ref) {\n  var dispatch = _ref.dispatch,\n      navigation = _ref.navigation,\n      mongoUser = _ref.mongoUser;\n\n  function checkIfLoggedIn() {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        navigation.navigate('products');\n      } else {\n        navigation.navigate('login');\n      }\n    });\n  }\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    checkIfLoggedIn();\n  }, [isFocused]);\n\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n\n      for (var i = 0; i < providerData.length; i += 1) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function onSignIn(googleUser) {\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n      unsubscribe();\n\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n        firebase.auth().signInWithCredential(credential).then(function (result) {\n          if (result.additionalUserInfo.isNewUser) {\n            dispatch(addUser(result.additionalUserInfo.profile));\n          } else {\n            var sub = result.additionalUserInfo.profile.sub;\n            dispatch(loadUser(sub));\n          }\n        }).catch(function (error) {\n          var errorCode = error.code;\n          var errorMessage = error.message;\n          var email = error.email;\n          var credential = error.credential;\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  function signInWithGoogleAsync() {\n    var result;\n    return _regeneratorRuntime.async(function signInWithGoogleAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Google.logInAsync({\n              iosClientId: '911481650727-c5qtavkbcnuqge0o8lbnnb7mtndtrbh9.apps.googleusercontent.com',\n              scopes: ['profile', 'email']\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (!(result.type === 'success')) {\n              _context.next = 7;\n              break;\n            }\n\n            onSignIn(result);\n            return _context.abrupt(\"return\", result.accessToken);\n\n          case 7:\n            return _context.abrupt(\"return\", {\n              cancelled: true\n            });\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", {\n              error: true\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Inicia sesi\\xF3n con Google\",\n    onPress: function onPress() {\n      return signInWithGoogleAsync();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired\n  }).isRequired,\n  mongoUser: PropTypes.shape({})\n};\nLogin.defaultProps = {\n  mongoUser: {}\n};\n\nfunction mapStateToProps(_ref2) {\n  var authReducer = _ref2.authReducer;\n  return {\n    mongoUser: authReducer.user\n  };\n}\n\nexport default connect(mapStateToProps)(Login);","map":{"version":3,"sources":["/Users/daniel/Skylab/NowaitR/dani-final-project/client/src/components/Login/Login.jsx"],"names":["React","useEffect","Google","firebase","connect","PropTypes","useIsFocused","styles","addUser","loadUser","Login","dispatch","navigation","mongoUser","checkIfLoggedIn","auth","onAuthStateChanged","user","navigate","isFocused","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","unsubscribe","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","profile","sub","catch","error","errorCode","code","errorMessage","message","email","console","log","signInWithGoogleAsync","logInAsync","iosClientId","scopes","type","cancelled","container","propTypes","func","isRequired","shape","defaultProps","mapStateToProps","authReducer"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable no-shadow */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { View, Button, Text } from 'react-native';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useIsFocused } from '@react-navigation/native';\nimport styles from './LoginStyles';\nimport { addUser, loadUser } from '../../redux/actions/userActions';\n\nfunction Login({ dispatch, navigation, mongoUser }) {\n  function checkIfLoggedIn() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        navigation.navigate('products');\n      } else {\n        navigation.navigate('login');\n      }\n    });\n  }\n\n  const isFocused = useIsFocused();\n  useEffect(() => {\n    checkIfLoggedIn();\n  }, [isFocused]);\n\n  function isUserEqual(googleUser, firebaseUser) {\n    if (firebaseUser) {\n      const { providerData } = firebaseUser;\n      for (let i = 0; i < providerData.length; i += 1) {\n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID\n                && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  function onSignIn(googleUser) {\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    const unsubscribe = firebase.auth().onAuthStateChanged((firebaseUser) => {\n      unsubscribe();\n      // Check if we are already signed-in Firebase with the correct user.\n      if (!isUserEqual(googleUser, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        const credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.idToken,\n          googleUser.accessToken,\n        );\n\n        // Sign in with credential from the Google user.\n        firebase.auth().signInWithCredential(credential).then(\n          (result) => {\n            if (result.additionalUserInfo.isNewUser) {\n              dispatch(addUser(result.additionalUserInfo.profile));\n            } else {\n              const { sub } = result.additionalUserInfo.profile;\n              dispatch(loadUser(sub));\n            }\n          },\n        ).catch((error) => {\n          // Handle Errors here.\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          // The email of the user's account used.\n          const { email } = error;\n          // The firebase.auth.AuthCredential type that was used.\n          const { credential } = error;\n          // ...\n        });\n      } else {\n        console.log('User already signed-in Firebase.');\n      }\n    });\n  }\n\n  async function signInWithGoogleAsync() {\n    try {\n      const result = await Google.logInAsync({\n        // androidClientId: YOUR_CLIENT_ID_HERE,\n        iosClientId: '911481650727-c5qtavkbcnuqge0o8lbnnb7mtndtrbh9.apps.googleusercontent.com',\n        scopes: ['profile', 'email'],\n      });\n\n      if (result.type === 'success') {\n        onSignIn(result);\n        return result.accessToken;\n      }\n      return { cancelled: true };\n    } catch (e) {\n      return { error: true };\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Button\n        title=\"Inicia sesión con Google\"\n        onPress={() => signInWithGoogleAsync()}\n      />\n    </View>\n  );\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n  }).isRequired,\n  mongoUser: PropTypes.shape({}),\n};\n\nLogin.defaultProps = {\n  mongoUser: {},\n};\n\nfunction mapStateToProps({ authReducer }) {\n  return {\n    mongoUser: authReducer.user,\n  };\n}\n\nexport default connect(mapStateToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}